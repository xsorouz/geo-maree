# ======================================================================
# 🌊 Stack Géospatiale SHOM — docker-compose.yml
# Objectif : simuler une architecture microservices géospatiale complète
# avec stockage, API, serveur carto, monitoring, et accès simplifié.
# Les noms des services commencent par "shom-" pour éviter les conflits.
# ======================================================================

version: '3.8'

# 🔗 Réseau privé pour interconnecter tous les services
networks:
  shom_net:
    driver: bridge

# 💾 Volumes persistants pour stocker les données critiques
volumes:
  shom_postgis_data:
  shom_minio_data:
  shom_grafana_data:

services:

  # ================================
  # 🗺️ Base de données géospatiale
  # ================================

  shom-postgis:
    image: postgis/postgis:15-3.3
    container_name: shom-postgis
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: shom_db
    ports:
      - "5433:5432"  # Port exposé local :5433 pour éviter conflit avec pg local
    volumes:
      - shom_postgis_data:/var/lib/postgresql/data
    networks:
      - shom_net

  # ================================
  # 🗃️ Stockage objets (type S3)
  # ================================

  shom-minio:
    image: minio/minio
    container_name: shom-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9002:9000"  # API S3
      - "9003:9001"  # Console Web
    volumes:
      - shom_minio_data:/data
    networks:
      - shom_net

  # ================================
  # 🔁 API REST avec FastAPI
  # ================================
  shom-fastapi:
    build: ./fastapi
    container_name: shom-fastapi
    restart: unless-stopped
    ports:
      - "8008:8000"
    volumes:
      - ./fastapi:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    # ✅ Charge les variables d'environnement depuis fastapi/.env
    env_file:
      - ./fastapi/.env
    networks:
      - shom_net
    depends_on:
      - shom-postgis


  # ================================
  # 🗺️ Serveur cartographique (WMS/WFS)
  # ================================

  shom-geoserver:
    image: kartoza/geoserver
    container_name: shom-geoserver
    restart: unless-stopped
    ports:
      - "8085:8080"
    environment:
      GEOSERVER_ADMIN_PASSWORD: geoserver
    networks:
      - shom_net

  # ================================
  # 🛠️ Interface SQL simplifiée
  # ================================

  shom-adminer:
    image: adminer
    container_name: shom-adminer
    restart: unless-stopped
    ports:
      - "8086:8080"
    networks:
      - shom_net

  # ================================
  # 📈 Monitoring - Prometheus
  # ================================

  shom-prometheus:
    image: prom/prometheus
    container_name: shom-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - shom_net

  # ================================
  # 📊 Monitoring - Grafana
  # ================================

  shom-grafana:
    image: grafana/grafana
    container_name: shom-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    volumes:
      - shom_grafana_data:/var/lib/grafana
    networks:
      - shom_net
    depends_on:
      - shom-prometheus

  # ================================
  # 🌐 Reverse proxy optionnel (accès unifié)
  # ================================

  shom-nginx:
    image: nginx:latest
    container_name: shom-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro

    networks:
      - shom_net
    depends_on:
      - shom-fastapi
      - shom-geoserver
      - shom-minio
      - shom-grafana
